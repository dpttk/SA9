services:
  rabbit:
    image: rabbitmq:3-management
    hostname: rabbit
    env_file: env
    networks:
      - indocker
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 15s

  rest-api:
    build:
      context: ./rest-api
    container_name: rest_api_service
    ports:
      - "8000:8000"
    depends_on:
      rabbit:
        condition: service_healthy
    command: python -m uvicorn main:app --host 0.0.0.0 --port 8000
    env_file: env
    networks:
      - indocker

  filter:
    build:
      context: ./filter
    container_name: filter_service
    depends_on:
      rabbit:
        condition: service_healthy
      rest-api:
        condition: service_started
    env_file: env
    command: python /src/main.py
    networks:
      - indocker

  screaming:
    build:
      context: ./screaming
    container_name: screaming_service
    depends_on:
      rabbit:
        condition: service_healthy
      filter:
        condition: service_started
    env_file: env
    command: python /src/main.py
    networks:
      - indocker

  publish:
    build:
      context: ./publish
    container_name: publish_service
    depends_on:
      rabbit:
        condition: service_healthy
      screaming:
        condition: service_started
    env_file: env
    command: python /src/main.py
    networks:
      - indocker

networks:
  indocker:
    driver: bridge
    name: indocker
